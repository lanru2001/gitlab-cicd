stages:
- Pretest
- Test
- Dev
- Staging
- Production

variables:
  ECR_REGISTRY: 418300104773.dkr.ecr.us-east-1.amazonaws.com/nodejs-user-app
  AWS_DEFAULT_REGION: us-east-1
  APP_NAME: nodejs-user-app
  AWS_REGION: us-east-1 
  TAG: 1.0.0

.registry: &registry
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --no-cache-dir awscli

.build container":
  image: docker:stable
  stage: Pretest
  only:
    - master
  script:
    - docker build -t $APP_NAME:$TAG .
    - docker tag $APP_NAME:$TAG $ECR_REGISTRY:$TAG 
   
"Lint":
   stage: test
   image: $APP_NAME:$TAG 
   script:
     - ./bin/lint

"Push Image to Dev"
    stage: test
    environment: dev
    extends: 
      - .registry
      - .build container
    except:
      - master
    script:
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - docker build -t $APP_NAME:$TAG .
      - docker tag $APP_NAME:$TAG $ECR_REGISTRY:$TAG 
      - docker push $ECR_REGISTRY:$TAG 
 
"Push Image to QA"
    stage: test
    environment: qa
    extends: 
      - .registry
      - .build container
    except:
      - master
    script:
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - docker build -t $APP_NAME:$TAG .
      - docker tag $APP_NAME:$TAG $ECR_REGISTRY:$TAG 
      - docker push $ECR_REGISTRY:$TAG 

"Push Image to Prod"
    stage: test
    environment: prod
    extends: 
      - .registry
      - .build container
    except:
      - master
    script:
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - docker build -t $APP_NAME:$TAG .
      - docker tag $APP_NAME:$TAG $ECR_REGISTRY:$TAG 
      - docker push $ECR_REGISTRY:$TAG   

"deploy to Dev":
  stage: Dev
  before_script:
  - pip3 install --no-cache-dir awscli
  script:
    - aws ecs register-task-definition \
      --memory 512 \
      --cpu 256 \
      --task-role-arn $TASK_ROLE_ARN \
      --family $FAMILY \
      --network-mode $NETWORK_MODE \
      --requires-compatibilities $REQ_COMPATIBILITIES \
      --cli-input-json "file://taskdef.json"
    - aws ecs update-service  --service $ECS_SERVICE  --cluster $ECS_CLUSTER  --updateService --force-new-deployment 
    - aws ecs wait services-stable --service $ECS_SERVICE --cluster $ECS_CLUSTER 

"deploy to QA":
  stage: Staging
  before_script:
  - pip3 install --no-cache-dir awscli
  when: manual
  script:
    - aws ecs register-task-definition \
      --memory 512 \
      --cpu 256 \
      --task-role-arn $TASK_ROLE_ARN \
      --family $FAMILY \
      --network-mode $NETWORK_MODE \
      --requires-compatibilities $REQ_COMPATIBILITIES \
      --cli-input-json "file://taskdef.json"
    - aws ecs update-service  --service $ECS_SERVICE  --cluster $ECS_CLUSTER --task-definition amazon-ecs-sample --updateService --desired-count 3--force-new-deployment 
    - aws ecs wait services-stable --service $ECS_SERVICE --cluster $ECS_CLUSTER

"deploy to Prod":
  stage: Production
  before_script:
  - pip3 install --no-cache-dir awscli
  when: manual
  script:
    - aws ecs register-task-definition \
      --memory 512 \
      --cpu 256 \
      --task-role-arn $TASK_ROLE_ARN \
      --family $FAMILY \
      --network-mode $NETWORK_MODE \
      --requires-compatibilities $REQ_COMPATIBILITIES \
      --cli-input-json "file://taskdef.json"
    - aws ecs update-service  --service $ECS_SERVICE  --cluster $ECS_CLUSTER  --updateService --force-new-deployment 
    - aws ecs wait services-stable --service $ECS_SERVICE --cluster $ECS_CLUSTER 
